import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    repositories {
        jcenter()
        maven {
            name = "CottonMC"
            url = "http://server.bbkr.space:8081/artifactory/libs-release"
        }
    }

    dependencies {
        classpath "net.sf.proguard:proguard-gradle:6.2.2"
        classpath "io.github.cottonmc:proguard-mappings-parser:1.2.0"
    }
}

plugins {
    id 'fabric-loom' version '0.2.7-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
    maven {
        name = 'Cotton'
        url = 'http://server.bbkr.space:8081/artifactory/libs-release'
    }

    maven {
        name = 'CurseForge'
        url = 'https://minecraft.curseforge.com/api/maven'
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:$project.flk_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.terraformersmc:traverse:$project.traverse"
    modImplementation("com.terraformersmc:terrestria:$project.terrestria") {
        exclude group: "curse.maven"
    }

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(KotlinCompile) {
    kotlinOptions.jvmTarget = "1.8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "COPYING", "COPYING.LESSER", "CREDITS.md"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

task deleteProguard(type: Delete) {
    afterEvaluate {
        delete tasks.proguard.outJarFiles
    }
}

def proguardMappingsFile = new File(project.buildDir, "proguard/mappings.txt")

task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn jar//, deleteProguard
    injars(jar.outputs.files)
    outjars(new File(project.buildDir, "proguard/output.jar"))
    printmapping(proguardMappingsFile)
    forceprocessing()
    verbose()

    keep(allowobfuscation: true, 'class juuxel.terrestrialvacation.mixin.* {\
        *;\
    }')

    keep(allowobfuscation: true, 'class juuxel.terrestrialvacation.TerrestrialVacation {\
        public void init();\
    }')

    keep(allowobfuscation: true, 'class juuxel.terrestrialvacation.dimension.BiomeRiftDimension$Companion {\
        public void init();\
    }')
    
    keepclassmembers 'class juuxel.terrestrialvacation.TerrestrialVacation {\
        public static juuxel.terrestrialvacation.TerrestrialVacation INSTANCE;\
        public void init();\
    }'

    assumenosideeffects 'class kotlin.jvm.internal.Intrinsics {\
        static void checkParameterIsNotNull(java.lang.Object, java.lang.String);\
        static void checkExpressionValueIsNotNull(java.lang.Object, java.lang.String);\
    }'

//    repackageclasses 'juuxel.terrestrialvacation'
    flattenpackagehierarchy 'juuxel.chessmod'
//    keeppackagenames 'juuxel.terrestrialvacation.mixin'
    obfuscationdictionary(file('members.txt'))
    classobfuscationdictionary(file('classes.txt'))
    packageobfuscationdictionary(file('packages.txt'))
    keepattributes 'RuntimeVisibleAnnotations,RuntimeInvisibleAnnotations'
    useuniqueclassmembernames()

    afterEvaluate {
        libraryjars(configurations.runtimeClasspath.files)
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    }
}

task remapProguardJar(type: net.fabricmc.loom.task.RemapJarTask) {
    dependsOn proguard
    input = tasks.proguard.outJarFiles[0]
    classifier = 'proguard-dev'
    addNestedDependencies = true
}

import io.github.cottonmc.proguardparser.*

class MappingsHolder {
    static ProjectMapping mappings = null
}
ProjectMapping getMappings() {
    if (MappingsHolder.mappings == null) {
        MappingsHolder.mappings = ParserKt.parseProguardMappings(new File(project.buildDir, "proguard/mappings.txt").readLines())
    }

    return MappingsHolder.mappings
}

task renamedProguardJar(type: Jar) {
    dependsOn remapProguardJar
    archiveClassifier = 'proguard'

    afterEvaluate {
        for (Object o : remapProguardJar.outputs.files) {
            from(project.zipTree(o)) {
                exclude 'fabric.mod.json', 'mixins.terrestrial_vacation.json'
            }

            from(project.zipTree(o)) {
                include 'fabric.mod.json'
                filter {
                    def newClass = getMappings().findClass("juuxel.terrestrialvacation.TerrestrialVacation")
                    def newInit = newClass.findMethod("init", "void")
                    it.replaceAll("$newClass.from::$newInit.from", "$newClass.to::$newInit.to")
                }
            }

            from(project.zipTree(o)) {
                include 'mixins.terrestrial_vacation.json'
                filter {
                    def newPackage = getMappings().findPackage("juuxel.terrestrialvacation.mixin")
                    def result = it.replaceAll("juuxel\\.terrestrialvacation\\.mixin", newPackage)
                    for (ClassMapping c : getMappings().findClassesInPackage("juuxel.terrestrialvacation.mixin")) {
                        result = result.replaceAll("\"$c.fromSimpleName\"", "\"$c.toSimpleName\"")
                    }
                    result
                }
            }
        }
    }
}
